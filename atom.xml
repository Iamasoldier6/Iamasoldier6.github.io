<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Iamasoldier6&#39;s World</title>
  <subtitle>Forged from suffering, hardened by pain.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iamasoldier6.com/"/>
  <updated>2016-04-29T15:02:52.000Z</updated>
  <id>http://iamasoldier6.com/</id>
  
  <author>
    <name>Iamasoldier6</name>
    <email>iamasoldiersix@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Volley 研究综述（一）</title>
    <link href="http://iamasoldier6.com/2016/04/27/Android-Volley-%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/"/>
    <id>http://iamasoldier6.com/2016/04/27/Android-Volley-研究综述/</id>
    <published>2016-04-27T12:17:59.000Z</published>
    <updated>2016-04-29T15:02:52.000Z</updated>
    
    <content type="html">&lt;p&gt;Android 官网对 Volley 的一句话概括如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Volley is an HTTP library that makes networking for Android apps easier and most importantly,     faster.&lt;br&gt;Volley 是一个 HTTP 库，能让 Android apps 的网络操作更容易，并且最重要的是，更快捷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-Volley-的简介&quot;&gt;&lt;a href=&quot;#一-Volley-的简介&quot; class=&quot;headerlink&quot; title=&quot;一. Volley 的简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;一. Volley 的简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Volley 于 2013 年 Google I/O 大会上推出，是一种新式的网络通信框架，具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络请求的自动调度。&lt;/li&gt;
&lt;li&gt;多并发网络连接。&lt;/li&gt;
&lt;li&gt;使用标准 HTTP 缓存连贯性来缓存透明的磁盘和内存响应。&lt;/li&gt;
&lt;li&gt;支持请求优先级。&lt;/li&gt;
&lt;li&gt;取消请求 API 。你可以取消一个单一请求，或者你可以取消请求的某些区域。&lt;/li&gt;
&lt;li&gt;易于定制，例如，定制重试和回退功能。&lt;/li&gt;
&lt;li&gt;强大的指令，使得异步加载网络数据，且正确地显示到 UI 更加简单。&lt;/li&gt;
&lt;li&gt;调试与追踪工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Volley 擅长用来显示 UI 的 RPC (远程过程调用协议) 类型的操作，如获取作为构造性数据的一页搜索结果。它轻松地整合了任何协议，同时输出支持的数据，如原始的字符串，图片和 JSON 。通过提供内置的支持你需要的特性，Volley 使你免于去写样板代码，让你将关注点放在你的 app 的功能逻辑上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Volley 不适合大的数据文件的下载或者大数据量的操作，是由于 Volley 需要保持解析时内存里的所有响应。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上简介来自官网，总的来说，Volley 既可以像 AsyncHttpClient 一样简单地进行 HTTP 通信，也可以像 Universal-Image-Loader 一样轻松地加载网络图片。Volley 非常适合进行数据量不大，但通信频繁的网络操作，而对于大数据量的网络操作，如下载文件，Volley 的表现就不敢恭维了。&lt;/p&gt;
&lt;h2 id=&quot;二-Volley-的准备&quot;&gt;&lt;a href=&quot;#二-Volley-的准备&quot; class=&quot;headerlink&quot; title=&quot;二. Volley 的准备&quot;&gt;&lt;/a&gt;&lt;strong&gt;二. Volley 的准备&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;首先，电脑上最好得装有 Git ，具体安装方法因操作系统各异，自行 Google ，推荐梯子&lt;a href=&quot;http://www.meiyouvpn.top/promote/1335&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;美游 VPN &lt;/a&gt;，用了半年了，还不错。好，下载 Volley 源码：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://android.googlesource.com/platform/frameworks/volley&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下载完成后，在 /volley/build/intermediates/bundles/debug 里找到 classes.jar ，就是我们要的 jar 包了，拷贝一份出来，重命名成 volley.jar ，再使用 Android Studio 新建一个 Android 项目，将 volley.jar 文件添加到 libs 目录下，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt0ac.com1.z0.glb.clouddn.com/as_jar_5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后，鼠标左击选中 volley.jar ，再右击会出现一长串菜单，下拉找到 Add As Library 并单击，再 OK ，等待 Gradle build 。完事后，再选中项目，比如我的 VolleyDemo ，右击后下拉菜单，找到 Open Module Settings 并单击，出现如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt0ac.com1.z0.glb.clouddn.com/as_jar_6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;依次选中划线部分，点击右下角 OK ，等待 Gradle build ，完事后，这样，准备工作就完成了。&lt;/p&gt;
&lt;h2 id=&quot;三-StringRequest-的使用&quot;&gt;&lt;a href=&quot;#三-StringRequest-的使用&quot; class=&quot;headerlink&quot; title=&quot;三. StringRequest 的使用&quot;&gt;&lt;/a&gt;&lt;strong&gt;三. StringRequest 的使用&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;StringRequestDemo 地址：&lt;a href=&quot;https://github.com/Iamasoldier6/AndroidExerciseDemos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; GitHub &lt;/a&gt;，只有 Get 请求的使用，POST 请求的使用，类比即可。&lt;/p&gt;
&lt;p&gt;从最基本的 HTTP 通信开始学习，即发起一条 HTTP 请求，然后接收 HTTP 响应。Android Studio 新建一个StringRequestDemo 项目，其他全部默认，一路 Next 到底，最后 Done。思路如下：&lt;/p&gt;
&lt;p&gt;首先，在 MainActivity 的 onCreate() 方法里，需要获取到一个 RequestQueue 对象：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RequestQueue &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = Volley.newRequestQueue(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 RequestQueue 是一个请求队列对象，它可以缓存所有的 HTTP 请求，然后以一定的算法并发地发出这些请求。RequestQueue 内部的设计非常适合高并发，因此，不必为每一次的 HTTP 请求都创建一个 RequestQueue 对象，在每个需要和网络交互的 Activity 中创建一个 RequestQueue 对象基本足够。&lt;/p&gt;
&lt;p&gt;其次，为了要发出一条 HTTP 请求，再创建一个 StringRequest 对象：&lt;/p&gt;
&lt;figure class=&quot;highlight vbscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; url = &lt;span class=&quot;string&quot;&gt;&quot;http://www.google.com&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringRequest stringRequest = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringRequest(url,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Response&lt;/span&gt;.Listener&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; void onResponse(&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;response&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;Log&lt;/span&gt;.d(&lt;span class=&quot;string&quot;&gt;&quot;TAG&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;response&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Response&lt;/span&gt;.ErrorListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; void onErrorResponse(VolleyError &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;Log&lt;/span&gt;.e(&lt;span class=&quot;string&quot;&gt;&quot;TAG&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;.getMessage(), &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里 new 出一个 StringRequest 对象，StringRequest 的构造函数传入了三个参数，第一个是目标服务器的 URL 地址，第二个是服务器响应成功的回调，第三个是服务器响应失败的回调。具体来说，目标服务器地址填的是 Google 的首页（需要翻墙），然后，在响应成功的回调里，打印出服务器返回的内容；在响应失败的回调里，打印出失败的详细信息。&lt;/p&gt;
&lt;p&gt;最后，将该 StringRequest 对象添加到 RequestQueue 里面即可：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;.add(stringRequest);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，Volley 要访问网络，在 AndroidManifest.xml 文件中添加一条权限：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行程序，发出该 HTTP 请求，Logcat 中部分打印数据如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;itemscope&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;itemtype&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schema.org/WebPage&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width,minimum-scale=1.0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Search the world&#39;s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you&#39;re looking for.&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;noodp&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;robots&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/logos/doodles/2016/hertha-marks-ayrtons-162nd-birthday-6049205031272448-hp.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;itemprop&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/images/branding/product/ico/googleg_lodp.ico&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;shortcut icon&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Hertha Marks Ayrton&amp;amp;#8217;s 162nd birthday #GoogleDoodle&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;og:description&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.google.com/logos/doodles/2016/hertha-marks-ayrtons-162nd-birthday-6049205031272448-thp.png&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;og:image&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;500&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;og:image:width&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Google 返回的就是这一长串 HTML 代码，浏览器可以轻松地将这段 HTML 代码解析，然后将 Google 首页展现出来。如此，最基本的 HTTP 发送与响应的功能就完成了。代码量不多，其实，主要分以下三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个 RequestQueue 对象。&lt;/li&gt;
&lt;li&gt;创建一个 StringRequest 对象。&lt;/li&gt;
&lt;li&gt;将 StringRequest 对象添加到 RequestQueue 里面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上，使用的只是 GET 请求，不过 HTTP 的请求类型通常有 GET 和 POST ，要发出一条 POST 请求，则思路如下：&lt;/p&gt;
&lt;p&gt;事实上，StringRequest 中也提供了一种四个参数的构造函数，其中第一个参数即指定了请求类型，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;StringRequest stringRequest = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringRequest(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Method&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;POST&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;url&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;listener&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;errorListener&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是需要明确的是，StringRequest 中并没有提供设置 POST 参数的方法，然而，当发出 POST 请求时，Volley 会尝试调用 StringRequest 的父类即 Request 中的 getParams() 方法来获取 POST 参数，故只需要在 StringRequest 的匿名类中重写 getParams() 方法，于此设置 POST 参数即可，具体如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;StringRequest stringRequest = &lt;span class=&quot;literal&quot;&gt;new&lt;/span&gt; StringRequest(Method.POST, url, listener, errorListener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt; getParams() throws AuthFailureError &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;.put(&lt;span class=&quot;string&quot;&gt;&quot;params1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;value1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;.put(&lt;span class=&quot;string&quot;&gt;&quot;params2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;value2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然没有设置 POST 参数的方法，但是由于 Volley 开源，可以自由地添加和修改，定制出所需的 Volley 版本。&lt;/p&gt;
&lt;h2 id=&quot;四-JsonRequest-的使用&quot;&gt;&lt;a href=&quot;#四-JsonRequest-的使用&quot; class=&quot;headerlink&quot; title=&quot;四. JsonRequest 的使用&quot;&gt;&lt;/a&gt;&lt;strong&gt;四. JsonRequest 的使用&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;JsonRequestDemo 地址：&lt;a href=&quot;https://github.com/Iamasoldier6/AndroidExerciseDemos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; GitHub &lt;/a&gt;，只有 JsonObjectRequest 的使用，JsonArrayObject 的使用，类比即可。&lt;/p&gt;
&lt;p&gt;同 StringRequest 一样，JsonRequest 也是继承于 Request 类，但是，JsonRequest 是一个抽象类，无法直接创建实例，得从子类入手。其有两个直接的子类，JsonObjectRequest (用于请求一段 JSON 数据) 和 JsonArrayRequest (用于请求一段JSON 数组) 。具体如下：&lt;/p&gt;
&lt;p&gt;第一步同上述 StringRequest 的第一步一样。&lt;/p&gt;
&lt;p&gt;然后，再 new 出一个 JsonObjectRequest 对象：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JsonObjectRequest jsonObjectRequest = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JsonObjectRequest(url, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Response.Listener&amp;lt;JSONObject&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JSONObject response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Log.d(&lt;span class=&quot;string&quot;&gt;&quot;TAG&quot;&lt;/span&gt;, response.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Response.ErrorListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onErrorResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(VolleyError &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Log.e(&lt;span class=&quot;string&quot;&gt;&quot;TAG&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;.getMessage(), &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，类比 StringRequest ，将 JsonObjectRequest 对象添加到 RequestQueue 里面：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;.add(jsonObjectRequest);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同时，不要忘了在 AndroidManifest.xml 文件中添加同上面一样的权限。&lt;/p&gt;
&lt;p&gt;上面的 URL 地址是一个查询天气信息的接口，响应的数据是以 JSON 格式返回的，这样，HTTP 通信完成后，服务器响应的天气信息回调到 onResponse() 方法中，在 Logcat 中打印出数据如下：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;weatherinfo&quot;&lt;/span&gt;:&amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;city&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;北京&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;cityid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;101010100&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;temp&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;18&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;WD&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;东南风&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;WS&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1级&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;SD&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;17%&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;WSE&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;time&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;17:05&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;isRadar&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;Radar&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;JC_RADAR_AZ9010_JB&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;njd&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;暂无实况&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;qy&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1011&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;rain&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此，根据实际需求，从 JSONObject 对象中取出需要的数据即可。&lt;/p&gt;
&lt;p&gt;总结来说，StringRequest, JsonObjectRequest 和 JsonArrayRequest 的用法基本一致，关于 Android Volley 研究综述（一）到此结束，（二）未完待续。&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;1.&lt;a href=&quot;http://developer.android.com/training/volley/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/volley/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://developer.android.com/training/volley/simple.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/volley/simple.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/17482095&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/guolin_blog/article/details/17482095&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;#####博主沥血作文章，客观随性打钱赏。&lt;/p&gt;
&lt;p&gt;#####今时有幸结识您，来日相聚笑欢畅。&lt;/p&gt;
&lt;p&gt;###［支付宝］&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt0ac.com1.z0.glb.clouddn.com/ZFB.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;###［微信］&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt0ac.com1.z0.glb.clouddn.com/WX6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android 官网对 Volley 的一句话概括如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Volley is an HTTP library that makes networking for Android apps easier and most importa
    
    </summary>
    
    
      <category term="Android" scheme="http://iamasoldier6.com/tags/Android/"/>
    
      <category term="Volley" scheme="http://iamasoldier6.com/tags/Volley/"/>
    
      <category term="Mac" scheme="http://iamasoldier6.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>半月技术谈</title>
    <link href="http://iamasoldier6.com/2016/04/14/%E5%8D%8A%E6%9C%88%E6%8A%80%E6%9C%AF%E8%B0%88/"/>
    <id>http://iamasoldier6.com/2016/04/14/半月技术谈/</id>
    <published>2016-04-14T10:18:39.000Z</published>
    <updated>2016-04-19T04:08:14.000Z</updated>
    
    <content type="html">&lt;p&gt;（之前近半年博客地址：&lt;a href=&quot;http://www.cnblogs.com/Iamasoldier6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客园&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;开博客有半个月了，总想搞个大新闻，奈何目前技术水平有限，憋不出来大事件，又想着尽量原创。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;索性，就把这半个月期间学习与开发中值得总结的东西放博客上，供自己复用时查询，也供需要的人参考。以后，也尽量保持一周或半月左右更新篇博客，于自己也是成长，同时有用的点也能帮助需要的人。不废话，呈现如下：&lt;/p&gt;
&lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;博主前段时间深感 Java 基础无力，于是自清明放假开始，重新撸起去年自学期间半途放弃的《Thinking in Java》，并打算一季左右撸完。目前，已撸到了第 7 章，正常进度应该可以达成初定目标吧，原谅我是个渣渣，大神勿喷。几点总结如下：&lt;/p&gt;
&lt;p&gt;1.在 Java 中你所做的全部工作就是定义类，产生那些类的对象，以及发送消息给这些对象。&lt;/p&gt;
&lt;p&gt;2.一个 static 字段对每个类来说都只有一份存储空间，而非 static 字段则是对每个对象有一个存储空间。&lt;/p&gt;
&lt;p&gt;3.构造器的名称必须与类名完全相同。System.gc() 用于强制进行终结动作。&lt;/p&gt;
&lt;p&gt;4.通常写 this 的时候，都是指“这个对象”或者“当前对象”，而且它本身表示对当前对象的引用。&lt;/p&gt;
&lt;p&gt;5.初始化的顺序是先静态对象，而后是“非静态”对象。&lt;/p&gt;
&lt;p&gt;6.重构即重写代码，以使得它更可读、更易理解，并因此而更具有可维护性。&lt;/p&gt;
&lt;p&gt;7.关于public, protected, default 与 private 的作用域：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;作用域&lt;/th&gt;
&lt;th&gt;当前类&lt;/th&gt;
&lt;th&gt;同一包内&lt;/th&gt;
&lt;th&gt;子类&lt;/th&gt;
&lt;th&gt;其他包&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Android&quot;&gt;&lt;a href=&quot;#Android&quot; class=&quot;headerlink&quot; title=&quot;Android&quot;&gt;&lt;/a&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;1.Android Studio 的中文乱码问题：Android Studio 安装后发现所有的中文，不管是界面上的还是输出的 Log 中的中文，都变成问号小框框， 可以肯定是字体的问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;解决办法&lt;/code&gt;：Preferences -&amp;gt; Appearance &amp;amp; Behavior -&amp;gt; Appearance -&amp;gt; 选择 Override default fonts by，随便选择一个中文字体，小框框都是中文字，再保存重启就行。&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://laobie.github.io/android/2016/02/14/android-studio-tips.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio 小技巧合集&lt;/a&gt;，熟练一些常用快捷键操作，简直不能太顺心。&lt;/p&gt;
&lt;h2 id=&quot;Variety&quot;&gt;&lt;a href=&quot;#Variety&quot; class=&quot;headerlink&quot; title=&quot;Variety&quot;&gt;&lt;/a&gt;&lt;strong&gt;Variety&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;上周第二遍看《星际穿越》，哲理与人事方面颇受洗礼，很 Nice 的电影。具体解读纷繁，就不提了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;（之前近半年博客地址：&lt;a href=&quot;http://www.cnblogs.com/Iamasoldier6/&quot;&gt;博客园&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;开博客有半个月了，总想搞个大新闻，奈何目前技术水平有限，憋不出来大事件，又想着尽量原创。
    
    </summary>
    
    
      <category term="Android" scheme="http://iamasoldier6.com/tags/Android/"/>
    
      <category term="Java" scheme="http://iamasoldier6.com/tags/Java/"/>
    
      <category term="Variety" scheme="http://iamasoldier6.com/tags/Variety/"/>
    
  </entry>
  
  <entry>
    <title>Mac_Android_配置adb环境变量</title>
    <link href="http://iamasoldier6.com/2016/03/31/Mac-Android-%E9%85%8D%E7%BD%AEadb%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://iamasoldier6.com/2016/03/31/Mac-Android-配置adb环境变量/</id>
    <published>2016-03-31T12:53:44.000Z</published>
    <updated>2016-04-15T06:02:07.000Z</updated>
    
    <content type="html">&lt;p&gt;背景：&lt;/p&gt;
&lt;p&gt;折腾了近两天终于把博客搭建好了，圆了近半年的念想，以后终于有个专属自己的博客园地了。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;等把这Hexo博客优化熟练好了，或许未来会开篇博客，讲搭建优化过程。这是搭建博客后的第一篇干货博客，熟悉下写博客流程，顺便试试效果怎样。下面进入正题，关于“Mac下Android的配置adb环境变量”，写这个小专题源于之前学习《第一行代码》时，在“SQLite存储”一节遇到的，现与大家分享。方法如下：&lt;/p&gt;
&lt;p&gt;1.打开终端Terminal。&lt;/p&gt;
&lt;p&gt;2.进入HOME目录：命令行输入 echo（这之间有一个空格） $HOME&lt;/p&gt;
&lt;p&gt;3.创建.bash_profile文件：命令行输入 touch（这之间有一个空格）.bash_profile&lt;/p&gt;
&lt;p&gt;4.打开.bash_profile文件：命令行输入open（这之间有一个空格）-e（这之间有一个空格）.bash_profile，自动弹出 .bash_profile 文件的编辑窗口。&lt;/p&gt;
&lt;p&gt;5.关键一步，不清楚AS的SDK路径，开启AS中的SDK Manager即可找到，&lt;br&gt;在.bash_profile文件中输入，比如我的：export PATH=${PATH}:/Users/Iamasoldier6/Library/Android/sdk/platform-tools&lt;/p&gt;
&lt;p&gt;6.保存文件。&lt;/p&gt;
&lt;p&gt;7.更新才配置的环境变量：命令行输入source（这之间有一个空格）.bash_profile&lt;/p&gt;
&lt;p&gt;8.验证配置：输入adb，出现-bash: adb: command not found，则失败，找原因重新配置；&lt;br&gt;出现adb的命令参数解释，则表明环境变量配置成功，Bingo!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;背景：&lt;/p&gt;
&lt;p&gt;折腾了近两天终于把博客搭建好了，圆了近半年的念想，以后终于有个专属自己的博客园地了。
    
    </summary>
    
    
      <category term="Android" scheme="http://iamasoldier6.com/tags/Android/"/>
    
      <category term="Mac" scheme="http://iamasoldier6.com/tags/Mac/"/>
    
      <category term="adb" scheme="http://iamasoldier6.com/tags/adb/"/>
    
  </entry>
  
</feed>
